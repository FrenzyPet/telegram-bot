name: CI/CD Docker Deploy (simple .tar)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: telegram-bot
  IMAGE_TAG: latest

jobs:
  init_check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.14'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test imports
        run: |
          python -c "import telebot; from dotenv import load_dotenv; print('All imports successful')"

      - name: Syntax check
        run: |
          python -m py_compile bot.py
          echo "âœ… Syntax is correct"

  deploy:
    runs-on: ubuntu-latest
    needs: init_check
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Save Docker image to tar
        run: |
          docker save $IMAGE_NAME:$IMAGE_TAG -o telegram-bot.tar
          chmod 644 telegram-bot.tar

      - name: Upload image tar to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: telegram-bot.tar
          target: /home/${{ secrets.SERVER_USER }}/projects/telegram-bot/

      - name: Deploy on server (load image, write .env, run container)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail

            DEPLOY_USER="${{ secrets.SERVER_USER }}"
            DEPLOY_DIR="/home/${DEPLOY_USER}/projects/telegram-bot"
            TAR_FILE="${DEPLOY_DIR}/telegram-bot.tar"
            LOG_DIR="${DEPLOY_DIR}/logs"
            IMAGE_NAME="telegram-bot"
            IMAGE_TAG="test"

            echo "Ensure deploy dir exists"
            mkdir -p "${DEPLOY_DIR}"
            mkdir -p "${LOG_DIR}"
            chown -R "${DEPLOY_USER}:${DEPLOY_USER}" "$(dirname "${DEPLOY_DIR}")" || true
            chown -R "${DEPLOY_USER}:${DEPLOY_USER}" "${DEPLOY_DIR}" || true

            cd "${DEPLOY_DIR}"

            echo "Stopping old container (if exists)"
            docker stop telegram-bot || true
            docker rm telegram-bot || true

            echo "Loading image from tar (may overwrite local image)"
            docker load -i "${TAR_FILE}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG

            echo "ðŸª„ Writing .env file line by line..."
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > .env
            echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}" >> .env

            chmod 600 "${DEPLOY_DIR}/.env"
            chown "${DEPLOY_USER}:${DEPLOY_USER}" "${DEPLOY_DIR}/.env" || true

            echo "Starting container"
            docker run -d \
              --name telegram-bot \
              --restart always \
              --env-file "${DEPLOY_DIR}/.env" \
              --workdir /app \
              -v "${DEPLOY_DIR}/logs":/app/logs \
              $IMAGE_NAME:$IMAGE_TAG

            # short wait and status
            sleep 3
            echo "Container list (filtered):"
            docker ps --filter "name=telegram-bot" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
